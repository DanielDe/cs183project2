#!/usr/csshare/bin/python

import re 
import sys
import os
import datetime

def write_to_log(s):
    f = open('accounts.log', 'a')
    f.write(s)
    f.close()

def write_error(e):
    sys.stderr.write(e)
    write_to_log(datetime.datetime.now().strftime('%Y%m%d%H%M%S') + ' WARN create_user ' + e)

# check for mandatory command line arguments 
mandatory_args = {'-l' : '<login>', '-u' : '<uid>', '-g' : '<gid>', '-i' : '<GECOS>', '-d' : '<home directory>', '-s' : '<shell>'}

def print_usage():
    usage = ''
    for s in [key + ' ' + mandatory_args[key] for key in mandatory_args]:
        usage += s + ' '
    write_error('Usage: ' + usage + '\n') 

arguments = sys.argv[1:]
if len(arguments) is not 2 * len(mandatory_args):
    write_error('Error: wrong number of command line arguments.\n')
    print_usage()
    sys.exit(1)

args = {}
for i in range(0, len(arguments), 2):
    if arguments[i] not in mandatory_args:
        write_error('Error: unrecognized command line argument "' + arguments[i] + '"\n')
        print_usage()
        sys.exit(1)
    args[arguments[i]] = arguments[i + 1]

def backup_file(f):
    timestamp = datetime.datetime.now().strftime('%Y%m%d%H%M%S')
    os.system('cp ' + f + ' ' + f + '.' + timestamp)
    
# check if login is alphanumeric 
if not args['-l'].isalnum():
    write_error('Error: login must be alphanumeric\n')
    sys.exit(1)

# check if the uid is numeric
if not args['-u'].isdigit():
    write_error('Error: uid must be numeric\n')
    sys.exit(1)

# check if the uid is numeric
if not args['-g'].isdigit():
    write_error('Error: gid must be numeric\n')
    sys.exit(1)


# check if the shell is bash or tcsh
if args['-s'] != '/bin/bash' and args['-s'] != '/bin/tcsh':
    write_error('Error: shell must be /bin/bash or /bin/tcsh\n')
    sys.exit(1)

# (8) The home directory must not already be in 'etc/passwd'. 

# check if the login, uid or home directory are already in etc/passwd
f = open('etc/passwd', 'r')
lines = [line.strip() for line in f.readlines() if line.strip() != '' and line[0] != '#']
f.close()

for line in lines:
    if line[:line.find(':')] == args['-l']:
        write_error('Error: login already exists.\n')
        sys.exit(1)
    line = line[line.find(':') + 1:]
    line = line[line.find(':') + 1:]
    if line[:line.find(':')] == args['-u']:
        write_error('Error: uid already exists.\n')
        sys.exit(1)
    line = line[line.find(':') + 1:]
    line = line[line.find(':') + 1:]
    line = line[line.find(':') + 1:]
    if line[:line.find(':')] == args['-d']:
        write_error('Error: home directory already in use.\n')
        sys.exit(1)

# check if gid is in etc/group
f = open('etc/group', 'r')
lines = [line.strip() for line in f.readlines() if line.strip() != '' and line[0] != '#']
f.close()

gid_found = False
for line in lines:
    line = line[line.find(':') + 1:]
    line = line[line.find(':') + 1:]
    if args['-g'] == line[:line.find(':')]:
        gid_found = True
        break

if not gid_found:
    write_error('Error: gid not in etc/group\n')
    sys.exit(1)

# check if the <home directory> is within the home directory 
home_dir = args['-d'].strip()
if home_dir[-1] == '/':
    home_dir = home_dir[:-1]
home_dir = home_dir[:home_dir.rfind('/')]
home_dir = home_dir[:home_dir.rfind('/')]

cur_dir = os.getcwd();

if cur_dir != home_dir:
    write_error('Error: specified home directory not in home directory.\n')
    sys.exit(1)

# add an entry to passwd for this user 
backup_file('etc/passwd')
f = open('etc/passwd', 'a')
new_user = '\n' + args['-l'] + ':x:' + args['-u'] + ':' + args['-g'] + ':' + args['-i'] + ':' + args['-d'] + ':' + args['-s'] + '\n'
f.write(new_user)
f.close()

# create the home directory 
os.system('mkdir ' + args['-d'])

# copy etc/skel into the home dir
os.system('cp -r etc/skel/ ' + args['-d'])

write_to_log(datetime.datetime.now().strftime('%Y%m%d%H%M%S') + ' INFO create_user created user: ' + new_user[1:])
